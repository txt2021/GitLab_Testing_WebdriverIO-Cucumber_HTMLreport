{"info":{"type":"runner","start":"2022-11-01T12:53:08.069Z","_duration":13603,"cid":"0-3","capabilities":{"acceptInsecureCerts":true,"browserName":"chrome","browserVersion":"106.0.5249.119","chrome":{"chromedriverVersion":"106.0.5249.61 (511755355844955cd3e264779baf0dd38212a4d0-refs/branch-heads/5249@{#569})","userDataDir":"/tmp/.com.google.Chrome.PaxQk6"},"goog:chromeOptions":{"debuggerAddress":"localhost:35713"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true,"sessionId":"e2bb1426eb274b4963bf440be6a14173"},"sanitizedCapabilities":"chrome.106_0_5249_119.linux","config":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--window-size=1500,1000"]},"acceptInsecureCerts":true},"logLevel":"info","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--window-size=1500,1000"]},"acceptInsecureCerts":true},"specs":["./features/**/*.feature"],"exclude":[],"suites":{},"baseUrl":"https://about.gitlab.com/","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"cucumber","reporters":[["html-nice",{"outputDir":"./report","linkScreenshots":false,"filename":"report.html","reportTitle":"Test report","showInBrowser":true,"collapseTests":false}]],"services":["chromedriver"],"execArgv":[],"maxInstances":1,"maxInstancesPerCapability":100,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"},"specs":["/home/runner/work/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/features/Support.feature"],"sessionId":"e2bb1426eb274b4963bf440be6a14173","isMultiremote":false,"instanceOptions":{"e2bb1426eb274b4963bf440be6a14173":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--window-size=1500,1000"]},"acceptInsecureCerts":true},"logLevel":"info","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--window-size=1500,1000"]},"acceptInsecureCerts":true},"specs":["./features/**/*.feature"],"exclude":[],"suites":{},"baseUrl":"https://about.gitlab.com/","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"cucumber","reporters":[["html-nice",{"outputDir":"./report","linkScreenshots":false,"filename":"report.html","reportTitle":"Test report","showInBrowser":true,"collapseTests":false}]],"services":["chromedriver"],"execArgv":[],"maxInstances":1,"maxInstancesPerCapability":100,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"}},"retry":0,"failures":0,"retries":0,"end":"2022-11-01T12:53:21.672Z"},"metrics":{"passed":20,"skipped":0,"failed":0,"duration":13603,"start":"2022-11-01T12:53:08.069Z","end":"2022-11-01T12:53:21Z"},"title":"Test report","suites":[{"type":"feature","start":"2022-11-01T12:53:08.109Z","_duration":13508,"tests":[],"hooks":[],"suites":[{"type":"scenario","start":"2022-11-01T12:53:08.134Z","_duration":3229,"tests":[{"type":"test","start":"2022-11-01T12:53:08.136Z","_duration":4,"uid":"25","cid":"0-3","title":"Given A user open main GitLab page","fullTitle":"0: Given A user open main GitLab page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"}],"retries":0,"parent":"0","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:08.140Z"},{"type":"test","start":"2022-11-01T12:53:08.141Z","_duration":1171,"uid":"26","cid":"0-3","title":"When A user clicks on \"Support\" button","fullTitle":"0: When A user clicks on \"Support\" button","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"bddc1259-f009-48a1-aae2-ed3314c23b44"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/bddc1259-f009-48a1-aae2-ed3314c23b44/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/bddc1259-f009-48a1-aae2-ed3314c23b44/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"0","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:09.312Z"},{"type":"test","start":"2022-11-01T12:53:09.312Z","_duration":1995,"uid":"27","cid":"0-3","title":"When A user clicks on \"Contact Support\"","fullTitle":"0: When A user clicks on \"Contact Support\"","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/support/\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/support/\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"5686fcaf-7d58-4f73-be62-da5854d2e8c3"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/5686fcaf-7d58-4f73-be62-da5854d2e8c3/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/5686fcaf-7d58-4f73-be62-da5854d2e8c3/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"0","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:11.307Z"},{"type":"test","start":"2022-11-01T12:53:11.308Z","_duration":54,"uid":"28","cid":"0-3","title":"Then \"GitLab Support\" title was displayed. User was redirected to the \"https://about.gitlab.com/support/\" page","fullTitle":"0: Then \"GitLab Support\" title was displayed. User was redirected to the \"https://about.gitlab.com/support/\" page","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"5d821e1b-a1c4-4313-984f-2abd29065ff2"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"5d821e1b-a1c4-4313-984f-2abd29065ff2","ELEMENT":"5d821e1b-a1c4-4313-984f-2abd29065ff2"}]},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"5d821e1b-a1c4-4313-984f-2abd29065ff2","ELEMENT":"5d821e1b-a1c4-4313-984f-2abd29065ff2"}]},"result":{"value":true},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"5d821e1b-a1c4-4313-984f-2abd29065ff2"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/5d821e1b-a1c4-4313-984f-2abd29065ff2/text","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/5d821e1b-a1c4-4313-984f-2abd29065ff2/text","body":{},"result":{"value":"GitLab Support"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://about.gitlab.com/support/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"0","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:11.362Z"}],"hooks":[{"type":"hook","start":"2022-11-01T12:53:08.134Z","_duration":1,"uid":"70","cid":"0-3","title":"","parent":"0","errors":[],"end":"2022-11-01T12:53:08.135Z"},{"type":"hook","start":"2022-11-01T12:53:11.362Z","_duration":1,"uid":"75","cid":"0-3","title":"","parent":"0","errors":[],"end":"2022-11-01T12:53:11.363Z"}],"suites":[],"hooksAndTests":[{"type":"hook","start":"2022-11-01T12:53:08.134Z","_duration":1,"uid":"70","cid":"0-3","title":"","parent":"0","errors":[],"end":"2022-11-01T12:53:08.135Z"},{"type":"test","start":"2022-11-01T12:53:08.136Z","_duration":4,"uid":"25","cid":"0-3","title":"Given A user open main GitLab page","fullTitle":"0: Given A user open main GitLab page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"}],"retries":0,"parent":"0","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:08.140Z"},{"type":"test","start":"2022-11-01T12:53:08.141Z","_duration":1171,"uid":"26","cid":"0-3","title":"When A user clicks on \"Support\" button","fullTitle":"0: When A user clicks on \"Support\" button","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"bddc1259-f009-48a1-aae2-ed3314c23b44"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/bddc1259-f009-48a1-aae2-ed3314c23b44/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/bddc1259-f009-48a1-aae2-ed3314c23b44/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"0","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:09.312Z"},{"type":"test","start":"2022-11-01T12:53:09.312Z","_duration":1995,"uid":"27","cid":"0-3","title":"When A user clicks on \"Contact Support\"","fullTitle":"0: When A user clicks on \"Contact Support\"","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/support/\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/support/\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"5686fcaf-7d58-4f73-be62-da5854d2e8c3"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/5686fcaf-7d58-4f73-be62-da5854d2e8c3/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/5686fcaf-7d58-4f73-be62-da5854d2e8c3/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"0","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:11.307Z"},{"type":"test","start":"2022-11-01T12:53:11.308Z","_duration":54,"uid":"28","cid":"0-3","title":"Then \"GitLab Support\" title was displayed. User was redirected to the \"https://about.gitlab.com/support/\" page","fullTitle":"0: Then \"GitLab Support\" title was displayed. User was redirected to the \"https://about.gitlab.com/support/\" page","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"5d821e1b-a1c4-4313-984f-2abd29065ff2"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"5d821e1b-a1c4-4313-984f-2abd29065ff2","ELEMENT":"5d821e1b-a1c4-4313-984f-2abd29065ff2"}]},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"5d821e1b-a1c4-4313-984f-2abd29065ff2","ELEMENT":"5d821e1b-a1c4-4313-984f-2abd29065ff2"}]},"result":{"value":true},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"5d821e1b-a1c4-4313-984f-2abd29065ff2"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/5d821e1b-a1c4-4313-984f-2abd29065ff2/text","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/5d821e1b-a1c4-4313-984f-2abd29065ff2/text","body":{},"result":{"value":"GitLab Support"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://about.gitlab.com/support/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"0","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:11.362Z"},{"type":"hook","start":"2022-11-01T12:53:11.362Z","_duration":1,"uid":"75","cid":"0-3","title":"","parent":"0","errors":[],"end":"2022-11-01T12:53:11.363Z"}],"uid":"0","cid":"0-3","file":"/home/runner/work/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/features/Support.feature","title":"TC16 - Should navigate user to Contact Support","fullTitle":"Support.feature:1:1: TC16 - Should navigate user to Contact Support","tags":[],"parent":"Support.feature:1:1","end":"2022-11-01T12:53:11.363Z"},{"type":"scenario","start":"2022-11-01T12:53:11.364Z","_duration":2428,"tests":[{"type":"test","start":"2022-11-01T12:53:11.364Z","_duration":1,"uid":"30","cid":"0-3","title":"Given A user open main GitLab page","fullTitle":"1: Given A user open main GitLab page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"}],"retries":0,"parent":"1","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:11.365Z"},{"type":"test","start":"2022-11-01T12:53:11.366Z","_duration":1073,"uid":"31","cid":"0-3","title":"When A user clicks on \"Support\" button","fullTitle":"1: When A user clicks on \"Support\" button","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"af76321f-e212-482a-9a01-912f1cf5a9c5"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/af76321f-e212-482a-9a01-912f1cf5a9c5/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/af76321f-e212-482a-9a01-912f1cf5a9c5/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"1","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:12.439Z"},{"type":"test","start":"2022-11-01T12:53:12.439Z","_duration":1302,"uid":"32","cid":"0-3","title":"When A user clicks on \"Get Help\"","fullTitle":"1: When A user clicks on \"Get Help\"","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/get-help/\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/get-help/\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"c7ca21f1-2ae7-4d1b-a98e-1d2d90e7f41c"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/c7ca21f1-2ae7-4d1b-a98e-1d2d90e7f41c/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/c7ca21f1-2ae7-4d1b-a98e-1d2d90e7f41c/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"1","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:13.741Z"},{"type":"test","start":"2022-11-01T12:53:13.741Z","_duration":50,"uid":"33","cid":"0-3","title":"Then \"Help Topics\" title was displayed. User was redirected to the \"https://about.gitlab.com/get-help/\" page","fullTitle":"1: Then \"Help Topics\" title was displayed. User was redirected to the \"https://about.gitlab.com/get-help/\" page","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"22e3b973-f679-4467-81c3-d8300981accf"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"22e3b973-f679-4467-81c3-d8300981accf","ELEMENT":"22e3b973-f679-4467-81c3-d8300981accf"}]},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"22e3b973-f679-4467-81c3-d8300981accf","ELEMENT":"22e3b973-f679-4467-81c3-d8300981accf"}]},"result":{"value":true},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"22e3b973-f679-4467-81c3-d8300981accf"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/22e3b973-f679-4467-81c3-d8300981accf/text","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/22e3b973-f679-4467-81c3-d8300981accf/text","body":{},"result":{"value":"Help Topics"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://about.gitlab.com/get-help/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"1","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:13.791Z"}],"hooks":[{"type":"hook","start":"2022-11-01T12:53:11.364Z","_duration":0,"uid":"77","cid":"0-3","title":"","parent":"1","errors":[],"end":"2022-11-01T12:53:11.364Z"},{"type":"hook","start":"2022-11-01T12:53:13.792Z","_duration":0,"uid":"82","cid":"0-3","title":"","parent":"1","errors":[],"end":"2022-11-01T12:53:13.792Z"}],"suites":[],"hooksAndTests":[{"type":"hook","start":"2022-11-01T12:53:11.364Z","_duration":0,"uid":"77","cid":"0-3","title":"","parent":"1","errors":[],"end":"2022-11-01T12:53:11.364Z"},{"type":"test","start":"2022-11-01T12:53:11.364Z","_duration":1,"uid":"30","cid":"0-3","title":"Given A user open main GitLab page","fullTitle":"1: Given A user open main GitLab page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"}],"retries":0,"parent":"1","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:11.365Z"},{"type":"test","start":"2022-11-01T12:53:11.366Z","_duration":1073,"uid":"31","cid":"0-3","title":"When A user clicks on \"Support\" button","fullTitle":"1: When A user clicks on \"Support\" button","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"af76321f-e212-482a-9a01-912f1cf5a9c5"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/af76321f-e212-482a-9a01-912f1cf5a9c5/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/af76321f-e212-482a-9a01-912f1cf5a9c5/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"1","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:12.439Z"},{"type":"test","start":"2022-11-01T12:53:12.439Z","_duration":1302,"uid":"32","cid":"0-3","title":"When A user clicks on \"Get Help\"","fullTitle":"1: When A user clicks on \"Get Help\"","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/get-help/\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/get-help/\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"c7ca21f1-2ae7-4d1b-a98e-1d2d90e7f41c"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/c7ca21f1-2ae7-4d1b-a98e-1d2d90e7f41c/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/c7ca21f1-2ae7-4d1b-a98e-1d2d90e7f41c/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"1","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:13.741Z"},{"type":"test","start":"2022-11-01T12:53:13.741Z","_duration":50,"uid":"33","cid":"0-3","title":"Then \"Help Topics\" title was displayed. User was redirected to the \"https://about.gitlab.com/get-help/\" page","fullTitle":"1: Then \"Help Topics\" title was displayed. User was redirected to the \"https://about.gitlab.com/get-help/\" page","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"22e3b973-f679-4467-81c3-d8300981accf"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"22e3b973-f679-4467-81c3-d8300981accf","ELEMENT":"22e3b973-f679-4467-81c3-d8300981accf"}]},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"22e3b973-f679-4467-81c3-d8300981accf","ELEMENT":"22e3b973-f679-4467-81c3-d8300981accf"}]},"result":{"value":true},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[role=\"main\"] h1"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"22e3b973-f679-4467-81c3-d8300981accf"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/22e3b973-f679-4467-81c3-d8300981accf/text","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/22e3b973-f679-4467-81c3-d8300981accf/text","body":{},"result":{"value":"Help Topics"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://about.gitlab.com/get-help/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"1","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:13.791Z"},{"type":"hook","start":"2022-11-01T12:53:13.792Z","_duration":0,"uid":"82","cid":"0-3","title":"","parent":"1","errors":[],"end":"2022-11-01T12:53:13.792Z"}],"uid":"1","cid":"0-3","file":"/home/runner/work/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/features/Support.feature","title":"TC17 - Should navigate user to Get Help page","fullTitle":"Support.feature:1:1: TC17 - Should navigate user to Get Help page","tags":[],"parent":"Support.feature:1:1","end":"2022-11-01T12:53:13.792Z"},{"type":"scenario","start":"2022-11-01T12:53:13.792Z","_duration":2633,"tests":[{"type":"test","start":"2022-11-01T12:53:13.793Z","_duration":2,"uid":"35","cid":"0-3","title":"Given A user open main GitLab page","fullTitle":"2: Given A user open main GitLab page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"}],"retries":0,"parent":"2","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:13.795Z"},{"type":"test","start":"2022-11-01T12:53:13.795Z","_duration":1155,"uid":"36","cid":"0-3","title":"When A user clicks on \"Support\" button","fullTitle":"2: When A user clicks on \"Support\" button","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"2cb33523-3140-4bff-af8d-42c8c6be30f1"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/2cb33523-3140-4bff-af8d-42c8c6be30f1/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/2cb33523-3140-4bff-af8d-42c8c6be30f1/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"2","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:14.950Z"},{"type":"test","start":"2022-11-01T12:53:14.950Z","_duration":1466,"uid":"37","cid":"0-3","title":"When A user clicks on \"Set up support services\"","fullTitle":"2: When A user clicks on \"Set up support services\"","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/services/\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/services/\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"d4babf9d-4e9e-429e-8651-9c9582bbffaf"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/d4babf9d-4e9e-429e-8651-9c9582bbffaf/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/d4babf9d-4e9e-429e-8651-9c9582bbffaf/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"2","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:16.416Z"},{"type":"test","start":"2022-11-01T12:53:16.416Z","_duration":9,"uid":"38","cid":"0-3","title":"Then \"GitLab Professional Services\" title was displayed. User was redirected to the \"https://about.gitlab.com/services/\" page","fullTitle":"2: Then \"GitLab Professional Services\" title was displayed. User was redirected to the \"https://about.gitlab.com/services/\" page","output":[{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://about.gitlab.com/services/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"2","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:16.425Z"}],"hooks":[{"type":"hook","start":"2022-11-01T12:53:13.792Z","_duration":1,"uid":"84","cid":"0-3","title":"","parent":"2","errors":[],"end":"2022-11-01T12:53:13.793Z"},{"type":"hook","start":"2022-11-01T12:53:16.425Z","_duration":0,"uid":"89","cid":"0-3","title":"","parent":"2","errors":[],"end":"2022-11-01T12:53:16.425Z"}],"suites":[],"hooksAndTests":[{"type":"hook","start":"2022-11-01T12:53:13.792Z","_duration":1,"uid":"84","cid":"0-3","title":"","parent":"2","errors":[],"end":"2022-11-01T12:53:13.793Z"},{"type":"test","start":"2022-11-01T12:53:13.793Z","_duration":2,"uid":"35","cid":"0-3","title":"Given A user open main GitLab page","fullTitle":"2: Given A user open main GitLab page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"}],"retries":0,"parent":"2","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:13.795Z"},{"type":"test","start":"2022-11-01T12:53:13.795Z","_duration":1155,"uid":"36","cid":"0-3","title":"When A user clicks on \"Support\" button","fullTitle":"2: When A user clicks on \"Support\" button","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"2cb33523-3140-4bff-af8d-42c8c6be30f1"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/2cb33523-3140-4bff-af8d-42c8c6be30f1/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/2cb33523-3140-4bff-af8d-42c8c6be30f1/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"2","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:14.950Z"},{"type":"test","start":"2022-11-01T12:53:14.950Z","_duration":1466,"uid":"37","cid":"0-3","title":"When A user clicks on \"Set up support services\"","fullTitle":"2: When A user clicks on \"Set up support services\"","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/services/\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/services/\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"d4babf9d-4e9e-429e-8651-9c9582bbffaf"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/d4babf9d-4e9e-429e-8651-9c9582bbffaf/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/d4babf9d-4e9e-429e-8651-9c9582bbffaf/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"2","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:16.416Z"},{"type":"test","start":"2022-11-01T12:53:16.416Z","_duration":9,"uid":"38","cid":"0-3","title":"Then \"GitLab Professional Services\" title was displayed. User was redirected to the \"https://about.gitlab.com/services/\" page","fullTitle":"2: Then \"GitLab Professional Services\" title was displayed. User was redirected to the \"https://about.gitlab.com/services/\" page","output":[{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://about.gitlab.com/services/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"2","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:16.425Z"},{"type":"hook","start":"2022-11-01T12:53:16.425Z","_duration":0,"uid":"89","cid":"0-3","title":"","parent":"2","errors":[],"end":"2022-11-01T12:53:16.425Z"}],"uid":"2","cid":"0-3","file":"/home/runner/work/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/features/Support.feature","title":"TC18 - Should navigate user to GitLab Professional Services","fullTitle":"Support.feature:1:1: TC18 - Should navigate user to GitLab Professional Services","tags":[],"parent":"Support.feature:1:1","end":"2022-11-01T12:53:16.425Z"},{"type":"scenario","start":"2022-11-01T12:53:16.426Z","_duration":2713,"tests":[{"type":"test","start":"2022-11-01T12:53:16.426Z","_duration":2,"uid":"40","cid":"0-3","title":"Given A user open main GitLab page","fullTitle":"3: Given A user open main GitLab page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"}],"retries":0,"parent":"3","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:16.428Z"},{"type":"test","start":"2022-11-01T12:53:16.428Z","_duration":943,"uid":"41","cid":"0-3","title":"When A user clicks on \"Support\" button","fullTitle":"3: When A user clicks on \"Support\" button","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"42bcd519-befb-44fb-a311-26f359ea01f5"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/42bcd519-befb-44fb-a311-26f359ea01f5/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/42bcd519-befb-44fb-a311-26f359ea01f5/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"3","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:17.371Z"},{"type":"test","start":"2022-11-01T12:53:17.371Z","_duration":1586,"uid":"42","cid":"0-3","title":"When A user clicks on \"Contact Sales\"","fullTitle":"3: When A user clicks on \"Contact Sales\"","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/sales/\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/sales/\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"78050dbc-ea07-434a-9634-b4d5c9897458"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/78050dbc-ea07-434a-9634-b4d5c9897458/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/78050dbc-ea07-434a-9634-b4d5c9897458/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"3","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:18.957Z"},{"type":"test","start":"2022-11-01T12:53:18.957Z","_duration":181,"uid":"43","cid":"0-3","title":"Then \"Talk to an Expert\" title was displayed. User was redirected to the \"https://about.gitlab.com/sales/\" page","fullTitle":"3: Then \"Talk to an Expert\" title was displayed. User was redirected to the \"https://about.gitlab.com/sales/\" page","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"h1[data-aos=\"zoom-in-up\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"h1[data-aos=\"zoom-in-up\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"2bf29442-7d66-4589-a52b-0b5e5d26020e"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"2bf29442-7d66-4589-a52b-0b5e5d26020e","ELEMENT":"2bf29442-7d66-4589-a52b-0b5e5d26020e"}]},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"2bf29442-7d66-4589-a52b-0b5e5d26020e","ELEMENT":"2bf29442-7d66-4589-a52b-0b5e5d26020e"}]},"result":{"value":true},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"h1[data-aos=\"zoom-in-up\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"h1[data-aos=\"zoom-in-up\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"2bf29442-7d66-4589-a52b-0b5e5d26020e"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/2bf29442-7d66-4589-a52b-0b5e5d26020e/text","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/2bf29442-7d66-4589-a52b-0b5e5d26020e/text","body":{},"result":{"value":"Talk to an Expert"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[class=\"form_container\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[class=\"form_container\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"4caeb882-8be7-4184-827b-805bc7a79d92"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"4caeb882-8be7-4184-827b-805bc7a79d92","ELEMENT":"4caeb882-8be7-4184-827b-805bc7a79d92"}]},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"4caeb882-8be7-4184-827b-805bc7a79d92","ELEMENT":"4caeb882-8be7-4184-827b-805bc7a79d92"}]},"result":{"value":true},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://about.gitlab.com/sales/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"3","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:19.138Z"}],"hooks":[{"type":"hook","start":"2022-11-01T12:53:16.426Z","_duration":0,"uid":"91","cid":"0-3","title":"","parent":"3","errors":[],"end":"2022-11-01T12:53:16.426Z"},{"type":"hook","start":"2022-11-01T12:53:19.139Z","_duration":0,"uid":"96","cid":"0-3","title":"","parent":"3","errors":[],"end":"2022-11-01T12:53:19.139Z"}],"suites":[],"hooksAndTests":[{"type":"hook","start":"2022-11-01T12:53:16.426Z","_duration":0,"uid":"91","cid":"0-3","title":"","parent":"3","errors":[],"end":"2022-11-01T12:53:16.426Z"},{"type":"test","start":"2022-11-01T12:53:16.426Z","_duration":2,"uid":"40","cid":"0-3","title":"Given A user open main GitLab page","fullTitle":"3: Given A user open main GitLab page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"}],"retries":0,"parent":"3","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:16.428Z"},{"type":"test","start":"2022-11-01T12:53:16.428Z","_duration":943,"uid":"41","cid":"0-3","title":"When A user clicks on \"Support\" button","fullTitle":"3: When A user clicks on \"Support\" button","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"42bcd519-befb-44fb-a311-26f359ea01f5"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/42bcd519-befb-44fb-a311-26f359ea01f5/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/42bcd519-befb-44fb-a311-26f359ea01f5/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"3","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:17.371Z"},{"type":"test","start":"2022-11-01T12:53:17.371Z","_duration":1586,"uid":"42","cid":"0-3","title":"When A user clicks on \"Contact Sales\"","fullTitle":"3: When A user clicks on \"Contact Sales\"","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/sales/\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"ul[class=\"support-dropdown_item\"] li>a[href=\"/sales/\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"78050dbc-ea07-434a-9634-b4d5c9897458"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/78050dbc-ea07-434a-9634-b4d5c9897458/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/78050dbc-ea07-434a-9634-b4d5c9897458/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"3","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:18.957Z"},{"type":"test","start":"2022-11-01T12:53:18.957Z","_duration":181,"uid":"43","cid":"0-3","title":"Then \"Talk to an Expert\" title was displayed. User was redirected to the \"https://about.gitlab.com/sales/\" page","fullTitle":"3: Then \"Talk to an Expert\" title was displayed. User was redirected to the \"https://about.gitlab.com/sales/\" page","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"h1[data-aos=\"zoom-in-up\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"h1[data-aos=\"zoom-in-up\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"2bf29442-7d66-4589-a52b-0b5e5d26020e"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"2bf29442-7d66-4589-a52b-0b5e5d26020e","ELEMENT":"2bf29442-7d66-4589-a52b-0b5e5d26020e"}]},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"2bf29442-7d66-4589-a52b-0b5e5d26020e","ELEMENT":"2bf29442-7d66-4589-a52b-0b5e5d26020e"}]},"result":{"value":true},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"h1[data-aos=\"zoom-in-up\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"h1[data-aos=\"zoom-in-up\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"2bf29442-7d66-4589-a52b-0b5e5d26020e"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/2bf29442-7d66-4589-a52b-0b5e5d26020e/text","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/2bf29442-7d66-4589-a52b-0b5e5d26020e/text","body":{},"result":{"value":"Talk to an Expert"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[class=\"form_container\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[class=\"form_container\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"4caeb882-8be7-4184-827b-805bc7a79d92"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"4caeb882-8be7-4184-827b-805bc7a79d92","ELEMENT":"4caeb882-8be7-4184-827b-805bc7a79d92"}]},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"4caeb882-8be7-4184-827b-805bc7a79d92","ELEMENT":"4caeb882-8be7-4184-827b-805bc7a79d92"}]},"result":{"value":true},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://about.gitlab.com/sales/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"3","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:19.138Z"},{"type":"hook","start":"2022-11-01T12:53:19.139Z","_duration":0,"uid":"96","cid":"0-3","title":"","parent":"3","errors":[],"end":"2022-11-01T12:53:19.139Z"}],"uid":"3","cid":"0-3","file":"/home/runner/work/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/features/Support.feature","title":"TC19 - Should navigate user to Talk to an Expert page","fullTitle":"Support.feature:1:1: TC19 - Should navigate user to Talk to an Expert page","tags":[],"parent":"Support.feature:1:1","end":"2022-11-01T12:53:19.140Z"},{"type":"scenario","start":"2022-11-01T12:53:19.140Z","_duration":2477,"tests":[{"type":"test","start":"2022-11-01T12:53:19.140Z","_duration":2,"uid":"45","cid":"0-3","title":"Given A user open main GitLab page","fullTitle":"4: Given A user open main GitLab page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"}],"retries":0,"parent":"4","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:19.142Z"},{"type":"test","start":"2022-11-01T12:53:19.143Z","_duration":938,"uid":"46","cid":"0-3","title":"When A user clicks on \"Support\" button","fullTitle":"4: When A user clicks on \"Support\" button","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"39f49424-a769-4f42-8122-3bc9fdf9442c"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/39f49424-a769-4f42-8122-3bc9fdf9442c/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/39f49424-a769-4f42-8122-3bc9fdf9442c/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"4","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:20.081Z"},{"type":"test","start":"2022-11-01T12:53:20.081Z","_duration":1472,"uid":"47","cid":"0-3","title":"When A user clicks on \"Register1\"","fullTitle":"4: When A user clicks on \"Register1\"","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[data-nav=\"register\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[data-nav=\"register\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"ba749ce0-b784-4374-8a75-8ab81d5d9c10"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/ba749ce0-b784-4374-8a75-8ab81d5d9c10/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/ba749ce0-b784-4374-8a75-8ab81d5d9c10/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"4","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:21.553Z"},{"type":"test","start":"2022-11-01T12:53:21.553Z","_duration":63,"uid":"48","cid":"0-3","title":"Then \"Sign Up form\" title was displayed. User was redirected to the \"https://gitlab.com/users/sign_up/\" page","fullTitle":"4: Then \"Sign Up form\" title was displayed. User was redirected to the \"https://gitlab.com/users/sign_up/\" page","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[class=\"signup-page\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[class=\"signup-page\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"37c6a37a-6c5a-4ffc-bb2e-f68952373aa2"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"37c6a37a-6c5a-4ffc-bb2e-f68952373aa2","ELEMENT":"37c6a37a-6c5a-4ffc-bb2e-f68952373aa2"}]},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"37c6a37a-6c5a-4ffc-bb2e-f68952373aa2","ELEMENT":"37c6a37a-6c5a-4ffc-bb2e-f68952373aa2"}]},"result":{"value":true},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://gitlab.com/users/sign_up/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"4","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:21.616Z"}],"hooks":[{"type":"hook","start":"2022-11-01T12:53:19.140Z","_duration":0,"uid":"98","cid":"0-3","title":"","parent":"4","errors":[],"end":"2022-11-01T12:53:19.140Z"},{"type":"hook","start":"2022-11-01T12:53:21.616Z","_duration":1,"uid":"103","cid":"0-3","title":"","parent":"4","errors":[],"end":"2022-11-01T12:53:21.617Z"}],"suites":[],"hooksAndTests":[{"type":"hook","start":"2022-11-01T12:53:19.140Z","_duration":0,"uid":"98","cid":"0-3","title":"","parent":"4","errors":[],"end":"2022-11-01T12:53:19.140Z"},{"type":"test","start":"2022-11-01T12:53:19.140Z","_duration":2,"uid":"45","cid":"0-3","title":"Given A user open main GitLab page","fullTitle":"4: Given A user open main GitLab page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"}],"retries":0,"parent":"4","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:19.142Z"},{"type":"test","start":"2022-11-01T12:53:19.143Z","_duration":938,"uid":"46","cid":"0-3","title":"When A user clicks on \"Support\" button","fullTitle":"4: When A user clicks on \"Support\" button","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://about.gitlab.com/"},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[id=\"supportDropdown\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"39f49424-a769-4f42-8122-3bc9fdf9442c"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/39f49424-a769-4f42-8122-3bc9fdf9442c/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/39f49424-a769-4f42-8122-3bc9fdf9442c/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"4","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:20.081Z"},{"type":"test","start":"2022-11-01T12:53:20.081Z","_duration":1472,"uid":"47","cid":"0-3","title":"When A user clicks on \"Register1\"","fullTitle":"4: When A user clicks on \"Register1\"","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[data-nav=\"register\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"[data-nav=\"register\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"ba749ce0-b784-4374-8a75-8ab81d5d9c10"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/ba749ce0-b784-4374-8a75-8ab81d5d9c10/click","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/ba749ce0-b784-4374-8a75-8ab81d5d9c10/click","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"4","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:21.553Z"},{"type":"test","start":"2022-11-01T12:53:21.553Z","_duration":63,"uid":"48","cid":"0-3","title":"Then \"Sign Up form\" title was displayed. User was redirected to the \"https://gitlab.com/users/sign_up/\" page","fullTitle":"4: Then \"Sign Up form\" title was displayed. User was redirected to the \"https://gitlab.com/users/sign_up/\" page","output":[{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[class=\"signup-page\"]"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"div[class=\"signup-page\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"37c6a37a-6c5a-4ffc-bb2e-f68952373aa2"}},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"37c6a37a-6c5a-4ffc-bb2e-f68952373aa2","ELEMENT":"37c6a37a-6c5a-4ffc-bb2e-f68952373aa2"}]},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof ShadowRoot) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"37c6a37a-6c5a-4ffc-bb2e-f68952373aa2","ELEMENT":"37c6a37a-6c5a-4ffc-bb2e-f68952373aa2"}]},"result":{"value":true},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://gitlab.com/users/sign_up/"},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":null},"sessionId":"e2bb1426eb274b4963bf440be6a14173","cid":"0-3","type":"result"}],"retries":0,"parent":"4","state":"passed","events":[],"errorIndex":0,"end":"2022-11-01T12:53:21.616Z"},{"type":"hook","start":"2022-11-01T12:53:21.616Z","_duration":1,"uid":"103","cid":"0-3","title":"","parent":"4","errors":[],"end":"2022-11-01T12:53:21.617Z"}],"uid":"4","cid":"0-3","file":"/home/runner/work/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/features/Support.feature","title":"TC20 - Should navigate user to registration page","fullTitle":"Support.feature:1:1: TC20 - Should navigate user to registration page","tags":[],"parent":"Support.feature:1:1","end":"2022-11-01T12:53:21.617Z"}],"hooksAndTests":[],"uid":"Support.feature:1:1","cid":"0-3","file":"/home/runner/work/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/features/Support.feature","title":"Support services","tags":[],"description":"","end":"2022-11-01T12:53:21.619Z"}],"reportFile":"/home/runner/work/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/GitLab_Testing_WebdriverIO-Cucumber_HTMLreport/report/report-0-3.html","browserName":"not specified"}